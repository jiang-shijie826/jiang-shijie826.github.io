{"title":"VUE3实现组件刷新","slug":"VUE3实现组件刷新","date":"2023-05-31T05:54:08.000Z","updated":"2023-05-31T06:02:29.226Z","comments":true,"path":"api/articles/VUE3实现组件刷新.json","excerpt":null,"covers":["https://img2.baidu.com/it/u=4154503761,1097204876&fm=253&fmt=auto&app=138&f=JPEG?w=888&h=500"],"content":"<p>VUE3中实现组件刷新</p>\n<img src=\"https://img2.baidu.com/it/u=4154503761,1097204876&fm=253&fmt=auto&app=138&f=JPEG?w=888&h=500\" style=\"zoom:50%;\">\n\n<p>provide ： 向子组件以及子孙组件传递数据。接收两个参数，第一个参数是 key，即数据的名称；第二个参数为 value，即数据的值<br>inject ： 接收父组件或祖先组件传递过来的数据。接收一个参数 key，即父组件或祖先组件传递的数据名称</p>\n<p>通过依赖注入（provide和inject）实现自定义页面刷新事件</p>\n<p>原理： 给app.vue中router-view绑定v-if事件，在函数中控制v-if的值在短时间内由true到false再到true,从而使页面达到刷新效果</p>\n<p><strong>刷新实现</strong></p>\n<p>APP.VUE</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">import &#123; RouterView &#125; from &#x27;vue-router&#x27;</span><br><span class=\"line\">import &#123; ref, provide, nextTick &#125; from &#x27;vue&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">const isRouterActive = ref(true)</span><br><span class=\"line\">provide(&#x27;reload&#x27;, () =&gt; &#123;</span><br><span class=\"line\">  isRouterActive.value = false</span><br><span class=\"line\">  nextTick(() =&gt; &#123;</span><br><span class=\"line\">    isRouterActive.value = true</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;router-view v-if=&quot;isRouterActive&quot;&gt;&lt;/router-view&gt;</span><br><span class=\"line\">&lt;/emplate&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>刷新页面</strong><br>需要用到刷新事件的子组件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class=\"line\">import &#123; reactive, inject  &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">//刷新页面</span><br><span class=\"line\">//注入刷新事件,这里括号中的参数要对应上前面provide中的第一个参数 </span><br><span class=\"line\">const reload: any = inject(&#x27;reload&#x27;)</span><br><span class=\"line\">const jump = (item: any) =&gt; &#123;</span><br><span class=\"line\">\t....</span><br><span class=\"line\">  \t....</span><br><span class=\"line\">  \treload();</span><br><span class=\"line\">    ....</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n","more":"<p>VUE3中实现组件刷新</p>\n<img src=\"https://img2.baidu.com/it/u=4154503761,1097204876&fm=253&fmt=auto&app=138&f=JPEG?w=888&h=500\" style=\"zoom:50%;\" />\n\n<p>provide ： 向子组件以及子孙组件传递数据。接收两个参数，第一个参数是 key，即数据的名称；第二个参数为 value，即数据的值<br>inject ： 接收父组件或祖先组件传递过来的数据。接收一个参数 key，即父组件或祖先组件传递的数据名称</p>\n<p>通过依赖注入（provide和inject）实现自定义页面刷新事件</p>\n<p>原理： 给app.vue中router-view绑定v-if事件，在函数中控制v-if的值在短时间内由true到false再到true,从而使页面达到刷新效果</p>\n<p><strong>刷新实现</strong></p>\n<p>APP.VUE</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">import &#123; RouterView &#125; from &#x27;vue-router&#x27;</span><br><span class=\"line\">import &#123; ref, provide, nextTick &#125; from &#x27;vue&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">const isRouterActive = ref(true)</span><br><span class=\"line\">provide(&#x27;reload&#x27;, () =&gt; &#123;</span><br><span class=\"line\">  isRouterActive.value = false</span><br><span class=\"line\">  nextTick(() =&gt; &#123;</span><br><span class=\"line\">    isRouterActive.value = true</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;router-view v-if=&quot;isRouterActive&quot;&gt;&lt;/router-view&gt;</span><br><span class=\"line\">&lt;/emplate&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>刷新页面</strong><br>需要用到刷新事件的子组件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class=\"line\">import &#123; reactive, inject  &#125; from &#x27;vue&#x27;</span><br><span class=\"line\">//刷新页面</span><br><span class=\"line\">//注入刷新事件,这里括号中的参数要对应上前面provide中的第一个参数 </span><br><span class=\"line\">const reload: any = inject(&#x27;reload&#x27;)</span><br><span class=\"line\">const jump = (item: any) =&gt; &#123;</span><br><span class=\"line\">\t....</span><br><span class=\"line\">  \t....</span><br><span class=\"line\">  \treload();</span><br><span class=\"line\">    ....</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n","categories":[{"name":"技术","path":"api/categories/技术.json"}],"tags":[{"name":"VUE3","path":"api/tags/VUE3.json"}]}