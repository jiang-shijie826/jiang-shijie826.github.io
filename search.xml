<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>利用spark同步Hbase数据到ElasticSearch</title>
      <link href="/2025/03/21/%E5%88%A9%E7%94%A8spark%E5%90%8C%E6%AD%A5Hbase%E6%95%B0%E6%8D%AE%E5%88%B0ElasticSearch/"/>
      <url>/2025/03/21/%E5%88%A9%E7%94%A8spark%E5%90%8C%E6%AD%A5Hbase%E6%95%B0%E6%8D%AE%E5%88%B0ElasticSearch/</url>
      
        <content type="html"><![CDATA[<h2><span id="利用spark同步hbase数据到elasticsearch">利用spark同步Hbase数据到ElasticSearch</span></h2><hr><p><strong>主要实现思路:利用spark-submit 命令 + Scala 代码(亲测:同步10万条数据,38s左右)</strong></p><p>具体实现步骤如下:</p><h5><span id="1安装hadoop-habse-zooker-sacla-spark">1.安装hadoop、habse、zooker、sacla、spark</span></h5><p>参考此篇博客进行搭建:</p><p>[<a href="https://blog.csdn.net/qq_51235856/article/details/125712898]">https://blog.csdn.net/qq_51235856/article/details/125712898]</a>: </p><h5><span id="2编写同步jar包利用scala语言编写项目打包成jar上传到服务器">2.编写同步jar包(利用scala语言，编写项目，打包成jar，上传到服务器)</span></h5><ul><li><p>Idea中安装Scala插件</p><img src="/2025/03/21/%E5%88%A9%E7%94%A8spark%E5%90%8C%E6%AD%A5Hbase%E6%95%B0%E6%8D%AE%E5%88%B0ElasticSearch/image-20250321100343192.png" class title="image-20250321100343192"></li><li><p>新建Scala项目</p></li></ul><img src="/2025/03/21/%E5%88%A9%E7%94%A8spark%E5%90%8C%E6%AD%A5Hbase%E6%95%B0%E6%8D%AE%E5%88%B0ElasticSearch/image-20250320172304319.png" class title="image-20250320172304319"><ul><li>在build.sbt中引入依赖,导入的依赖需要考虑兼容性</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ThisBuild / version := &quot;v1&quot;</span><br><span class="line"></span><br><span class="line">ThisBuild / scalaVersion := &quot;2.11.12&quot;</span><br><span class="line"></span><br><span class="line">lazy val root = (project in file(&quot;.&quot;))</span><br><span class="line">  .settings(</span><br><span class="line">    name := &quot;spark2es&quot;,</span><br><span class="line">    idePackagePrefix := Some(&quot;com.xxxx.xxxx&quot;)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">libraryDependencies += &quot;org.apache.spark&quot; %% &quot;spark-core&quot; % &quot;2.4.0&quot;</span><br><span class="line">libraryDependencies += &quot;org.elasticsearch&quot; %% &quot;elasticsearch-spark-20&quot; % &quot;7.17.25&quot;</span><br><span class="line">libraryDependencies += &quot;org.apache.hbase&quot; % &quot;hbase-client&quot; % &quot;2.5.6&quot;</span><br><span class="line">libraryDependencies += &quot;org.apache.hbase&quot; % &quot;hbase-server&quot; % &quot;2.5.6&quot;</span><br><span class="line">libraryDependencies += &quot;org.apache.hbase.connectors.spark&quot; % &quot;hbase-spark&quot; % &quot;1.0.0&quot;</span><br><span class="line">libraryDependencies += &quot;org.apache.spark&quot; %% &quot;spark-sql&quot; % &quot;2.4.0&quot;</span><br><span class="line">libraryDependencies += &quot;com.alibaba&quot; % &quot;fastjson&quot; % &quot;1.2.77&quot;</span><br><span class="line">libraryDependencies += &quot;org.apache.hbase&quot; % &quot;hbase-mapreduce&quot; % &quot;2.5.6&quot;</span><br><span class="line">libraryDependencies += &quot;org.scala-lang&quot; % &quot;scala-library&quot; % &quot;2.11.12&quot;</span><br></pre></td></tr></table></figure><ul><li><p>新建scala文件</p><img src="/2025/03/21/%E5%88%A9%E7%94%A8spark%E5%90%8C%E6%AD%A5Hbase%E6%95%B0%E6%8D%AE%E5%88%B0ElasticSearch/image-20250320172907896.png" class title="image-20250320172907896"></li><li><p>编写文件</p></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">HBaseToElasticsearchMultipleTables</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">val</span> logger: <span class="type">Logger</span> = <span class="type">Logger</span>.getLogger(<span class="type">HBaseToElasticsearchMultipleTables</span>.getClass)</span><br><span class="line">  logger.setLevel(<span class="type">Level</span>.<span class="type">DEBUG</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//定义Hbase中需要同步的表</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> parserMapping: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Result</span> =&gt; <span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>]] = <span class="type">Map</span>(</span><br><span class="line">    <span class="string">&quot;student&quot;</span> -&gt; parsestudent,</span><br><span class="line">....更多数据</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义多个表和对应的索引</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">val</span> tablesAndIndexes = <span class="type">Seq</span>(</span><br><span class="line">    <span class="comment">//student:Hbase表名 student:es索引名 atsn:列簇</span></span><br><span class="line">    (<span class="string">&quot;student&quot;</span>, <span class="string">&quot;student&quot;</span>, <span class="string">&quot;atsn&quot;</span>),</span><br><span class="line">    ....更多数据</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment">//student</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">parsestudent</span></span>(result: <span class="type">Result</span>): <span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>] = &#123;</span><br><span class="line">    <span class="comment">//Hbase中的rowkey</span></span><br><span class="line">    <span class="keyword">val</span> rowKey = <span class="type">Bytes</span>.toString(result.getRow)</span><br><span class="line">    <span class="keyword">val</span> userId = <span class="type">Bytes</span>.toString(result.getValue(<span class="type">Bytes</span>.toBytes(<span class="string">&quot;atsn&quot;</span>), <span class="type">Bytes</span>.toBytes(<span class="string">&quot;userId&quot;</span>)))</span><br><span class="line">....更多数据</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建 Elasticsearch 文档</span></span><br><span class="line">    <span class="type">Map</span>(</span><br><span class="line">      <span class="comment">//key:Es中的字段名 rowKey:Hbase的列名</span></span><br><span class="line">      <span class="string">&quot;key&quot;</span> -&gt; rowKey,</span><br><span class="line">      <span class="string">&quot;userId&quot;</span> -&gt; userId,</span><br><span class="line">  ....更多数据</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建 SparkSession</span></span><br><span class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder()</span><br><span class="line">      .appName(<span class="string">&quot;HBaseToElasticsearch&quot;</span>)</span><br><span class="line">      <span class="comment">//true:连接器将禁用节点发现功能</span></span><br><span class="line">      .config(<span class="string">&quot;spark.es.nodes.wan.only&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">      <span class="comment">//指定es中id为Hbase中的rowkey,也可以由es自动生成</span></span><br><span class="line">      .config(<span class="string">&quot;spark.es.mapping.id&quot;</span>, <span class="string">&quot;key&quot;</span>)</span><br><span class="line">      <span class="comment">// upsert操作</span></span><br><span class="line">      .config(<span class="string">&quot;spark.es.write.operation&quot;</span>, <span class="string">&quot;upsert&quot;</span>) </span><br><span class="line">      <span class="comment">// 自动创建索引</span></span><br><span class="line">      .config(<span class="string">&quot;spark.es.index.auto.create&quot;</span>, <span class="string">&quot;true&quot;</span>) </span><br><span class="line">      .getOrCreate()</span><br><span class="line">    logger.info(<span class="string">&quot;Elasticsearch init Success~~~&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> startTime = <span class="type">System</span>.currentTimeMillis()</span><br><span class="line">    <span class="comment">// HBase 配置</span></span><br><span class="line">    <span class="keyword">val</span> hbaseConf = <span class="type">HBaseConfiguration</span>.create()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计同步的总条数</span></span><br><span class="line">    <span class="keyword">var</span> totalCount = <span class="number">0</span>L;</span><br><span class="line">    <span class="keyword">var</span> metricsList = <span class="type">List</span>.empty[<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Any</span>]]</span><br><span class="line">    <span class="comment">//循环遍历表和索引</span></span><br><span class="line">    tablesAndIndexes.foreach &#123; <span class="keyword">case</span> (hbaseTable, esIndex, family) =&gt;</span><br><span class="line">      hbaseConf.set(<span class="type">TableInputFormat</span>.<span class="type">INPUT_TABLE</span>, hbaseTable) <span class="comment">// HBase 表名</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 定义 Scan</span></span><br><span class="line">      <span class="keyword">val</span> scan = <span class="keyword">new</span> <span class="type">Scan</span>()</span><br><span class="line">      scan.addFamily(<span class="type">Bytes</span>.toBytes(family)) <span class="comment">// 列族名</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> scanStr = <span class="type">Base64</span>.getEncoder.encodeToString(<span class="type">ProtobufUtil</span>.toScan(scan).toByteArray)</span><br><span class="line">      hbaseConf.set(<span class="type">TableInputFormat</span>.<span class="type">SCAN</span>, scanStr)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 读取 HBase 数据</span></span><br><span class="line">      <span class="keyword">val</span> hbaseRDD = spark.sparkContext.newAPIHadoopRDD(</span><br><span class="line">        hbaseConf,</span><br><span class="line">        classOf[<span class="type">TableInputFormat</span>],</span><br><span class="line">        classOf[<span class="type">ImmutableBytesWritable</span>],</span><br><span class="line">        classOf[<span class="type">Result</span>]</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 处理数据并转换为 Elasticsearch 格式</span></span><br><span class="line">      <span class="keyword">val</span> parseFunction = parserMapping.getOrElse(hbaseTable,</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalArgumentException</span>(<span class="string">s&quot;未注册的表解析器: <span class="subst">$hbaseTable</span>&quot;</span>))</span><br><span class="line"> <span class="comment">//增加 Spark 作业的并行度,提高写入性能</span></span><br><span class="line">      <span class="keyword">val</span> targetPartitions = spark.sparkContext.defaultParallelism * <span class="number">4</span></span><br><span class="line">      logger.info(<span class="string">s&quot;hbaseRDD.repartition <span class="subst">$&#123;targetPartitions&#125;</span>&quot;</span>)</span><br><span class="line">  </span><br><span class="line">      <span class="comment">//映射Hbase中的列名和Es中的字段名</span></span><br><span class="line">      <span class="keyword">val</span> esRDD = hbaseRDD.repartition(targetPartitions).mapPartitions &#123; partition =&gt;</span><br><span class="line">        partition.flatMap &#123; <span class="keyword">case</span> (_, result) =&gt;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (result != <span class="literal">null</span>) <span class="type">Some</span>(parseFunction(result)) <span class="keyword">else</span> <span class="type">None</span></span><br><span class="line">          &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> e: <span class="type">Exception</span> =&gt;</span><br><span class="line">              <span class="comment">// 建议在此添加异常日志记录逻辑</span></span><br><span class="line">              logger.info(<span class="string">s&quot;Error processing result: <span class="subst">$&#123;e.getMessage&#125;</span>&quot;</span>)</span><br><span class="line">              <span class="type">None</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;.persist(<span class="type">StorageLevel</span>.<span class="type">MEMORY_ONLY_SER</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 将数据写入 Elasticsearch</span></span><br><span class="line">        esRDD.saveToEs(<span class="string">s&quot;<span class="subst">$esIndex</span>/_doc&quot;</span>, <span class="type">Map</span>(<span class="string">&quot;es.mapping.id&quot;</span> -&gt; <span class="string">&quot;key&quot;</span>))</span><br><span class="line">        logger.info(<span class="string">s&quot;Elasticsearch Index <span class="subst">$&#123;esIndex&#125;</span> sync success~~~&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将该索引的统计指标封装成 Map</span></span><br><span class="line">        <span class="keyword">val</span> count = esRDD.count()</span><br><span class="line">        totalCount += count</span><br><span class="line">        <span class="keyword">val</span> metric = <span class="type">Map</span>(<span class="string">&quot;hbaseTable&quot;</span> -&gt; hbaseTable, <span class="string">&quot;count&quot;</span> -&gt; count)</span><br><span class="line"></span><br><span class="line">        metricsList = metric :: metricsList</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> e: <span class="type">Exception</span> =&gt; &#123;</span><br><span class="line">          logger.error(<span class="string">&quot;插入es错误!&quot;</span> + e.getMessage)</span><br><span class="line">          e.printStackTrace()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        esRDD.unpersist()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> endTime = <span class="type">System</span>.currentTimeMillis()</span><br><span class="line">    <span class="keyword">val</span> btTime = endTime - startTime</span><br><span class="line">    logger.info(<span class="string">&quot;Sync Time:&quot;</span> + btTime + <span class="string">&quot;ms~~~&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将总体执行时间等信息封装成 Map 对象</span></span><br><span class="line">    <span class="keyword">val</span> jobName = <span class="string">&quot;HBaseToESSync_&quot;</span> + <span class="type">String</span>.valueOf(<span class="type">System</span>.currentTimeMillis());</span><br><span class="line">    <span class="keyword">val</span> sdf = <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> metrics = <span class="type">Map</span>(</span><br><span class="line">      <span class="string">&quot;jobName&quot;</span> -&gt; jobName,</span><br><span class="line">      <span class="string">&quot;totalCount&quot;</span> -&gt; totalCount,</span><br><span class="line">      <span class="string">&quot;jobDetail&quot;</span> -&gt; metricsList,</span><br><span class="line">      <span class="string">&quot;startTime&quot;</span> -&gt; sdf.format(<span class="keyword">new</span> <span class="type">Date</span>(startTime)),</span><br><span class="line">      <span class="string">&quot;endTime&quot;</span> -&gt; sdf.format(<span class="keyword">new</span> <span class="type">Date</span>(endTime)),</span><br><span class="line">      <span class="string">&quot;executionTime_ms&quot;</span> -&gt; btTime,</span><br><span class="line">      <span class="string">&quot;timestamp&quot;</span> -&gt; <span class="type">System</span>.currentTimeMillis()</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将指标写入到 ES 中的另一个索引（例如 job_metrics）</span></span><br><span class="line">    spark.sparkContext.parallelize(<span class="type">Seq</span>(metrics))</span><br><span class="line">      .saveToEs(<span class="string">&quot;job_metrics/_doc&quot;</span>, <span class="type">Map</span>(<span class="string">&quot;es.mapping.id&quot;</span> -&gt; <span class="string">&quot;jobName&quot;</span>))</span><br><span class="line"></span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>打包文件 clean package</li></ul><img src="/2025/03/21/%E5%88%A9%E7%94%A8spark%E5%90%8C%E6%AD%A5Hbase%E6%95%B0%E6%8D%AE%E5%88%B0ElasticSearch/image-20250320173103194.png" class title="image-20250320173103194"><h5><span id="3编写spark执行脚本">3.编写spark执行脚本</span></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">filename=/root/spark-2.4.0-bin/dist/$(date +%Y)/$(date +%m)/$(date +%d)</span><br><span class="line">if [ ! -d &quot;$filename&quot; ]; then</span><br><span class="line">    mkdir -p &quot;$filename&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">/root/spark-2.4.0-bin/bin/spark-submit \</span><br><span class="line">--class com.xxxx.xxxx.HBaseToElasticsearchMultipleTables \</span><br><span class="line">--master local[*] \</span><br><span class="line">--packages org.scala-lang:scala-library:2.11.12,org.apache.hbase:hbase-client:2.5.6,org.apache.hbase:hbase-mapreduce:2.5.6,org.elasticsearch:elasticsearch-spark-20_2.11:7.17.25 \</span><br><span class="line">--conf spark.es.nodes=&quot;xx.xx.xx.xx:9200&quot; \//Elasticsearch 节点的地址</span><br><span class="line">--conf spark.es.batch.size.bytes=&quot;10mb&quot; \//控制写入 Elasticsearch 时的批处理大小</span><br><span class="line">--conf spark.es.batch.size.entries=&quot;5000&quot; \//控制写入 Elasticsearch 时的批处理大小</span><br><span class="line">--conf spark.es.batch.write.refresh=&quot;false&quot; \//设置为 false，以减少写入时的刷新频率，提高性能</span><br><span class="line">--conf spark.hbase.zookeeper.quorum=&quot;hbase1&quot; \//配置 HBase 集群信息</span><br><span class="line">--conf spark.hbase.zookeeper.property.clientPort=&quot;2181&quot; \//配置 HBase 的 Zookeeper 集群信息</span><br><span class="line">--conf spark.serializer=&quot;org.apache.spark.serializer.KryoSerializer&quot; \//指定使用 Kryo 序列化器，以提高序列化性能</span><br><span class="line">/root/spark-2.4.0-bin/dist/spark2es_2.11-v1.jar &gt;&gt; $filename/$(date +%Y%m%d)_sync.log 2&gt;&amp;1 &amp;//指定包含主类的可执行 JAR 文件,将输出日志重定向到指定文件，并在后台运行该命令</span><br></pre></td></tr></table></figure><ul><li>class:Jar包执行的主类</li><li>packages:spark执行需要加载的依赖</li><li>conf:spark连接的配置项,在这配置增加了灵活性,也可以在代码中配置</li><li>&#x2F;root&#x2F;spark-2.4.0-bin&#x2F;dist&#x2F;spark2es_2.11-v1.jar:指定jar路劲,输出执行日志</li></ul><h5><span id="4服务器设置定时任务crontab">4.服务器设置定时任务crontab</span></h5><p>执行crontab -e</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 07 * * *  /root/spark-2.4.0-bin/dist/run_sync.sh</span><br></pre></td></tr></table></figure><h5><span id="5同步阿里云hbase数据需要添加认证参数">5.同步阿里云hbase数据，需要添加认证参数</span></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kinit -kt /path/to/your.keytab your_user@YOUR-REALM.COM</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">####添加 Kerberos 认证和 HBase 相关配置</span></span></span><br><span class="line">--conf spark.driver.extraJavaOptions=&quot;-Djava.security.krb5.conf=/etc/krb5.conf&quot; \</span><br><span class="line">--conf spark.executor.extraJavaOptions=&quot;-Djava.security.krb5.conf=/etc/krb5.conf&quot; \</span><br><span class="line">--conf spark.hadoop.hbase.security.authentication=&quot;kerberos&quot; \</span><br><span class="line">--conf spark.hadoop.hbase.master.kerberos.principal=&quot;hbase/_HOST@YOUR-REALM.COM&quot; \</span><br><span class="line">--conf spark.hadoop.hbase.regionserver.kerberos.principal=&quot;hbase/_HOST@YOUR-REALM.COM&quot; \</span><br></pre></td></tr></table></figure><h5><span id="6在-spark-submit-中用-files-传递-hbase-sitexml">6.在 spark-submit 中用 –files 传递 hbase-site.xml</span></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--files /etc/hbase/conf/hbase-site.xml \</span><br><span class="line">--conf spark.executor.extraClassPath=./hbase-site.xml \</span><br><span class="line">--conf spark.driver.extraClassPath=./hbase-site.xml \</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">并在代码中加载它</span></span><br><span class="line">hBaseConf.addResource(&quot;hbase-site.xml&quot;)</span><br></pre></td></tr></table></figure><h5><span id="7elasticsearch可以看到有定时任务的索引生成可以看到执行的时间以及同步的数据量大小">7.ElasticSearch可以看到有定时任务的索引生成,可以看到执行的时间以及同步的数据量大小</span></h5><img src="/2025/03/21/%E5%88%A9%E7%94%A8spark%E5%90%8C%E6%AD%A5Hbase%E6%95%B0%E6%8D%AE%E5%88%B0ElasticSearch/image-20250320174118378.png" class title="image-20250320174118378">]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2023/07/28/MySQL/"/>
      <url>/2023/07/28/MySQL/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><strong>附录:</strong></p><ul><li><strong>DQL</strong>(Dimensional Query Language):数据查询语言DQL基本结构是由SELECT子句，FROM子句，WHERE子句组成的查询块：SELECT &lt;字段名表&gt;FROM &lt;表或视图名&gt;WHERE &lt;查询条件&gt;</li><li><strong>DML</strong>(data manipulation language)：DML用来对数据库里的数据进行操作的语言,例如UPDATE、INSERT、DELETE</li><li><strong>DDL</strong>(data definition language)： DDL主要是用在定义或改变表（TABLE）的结构，数据类型，表之间的链接和约束等初始化工作上，他们大多在建立表时使用,主要的命令有CREATE、ALTER、DROP、TRUNCATE等 </li><li><strong>DCL</strong>(Data Control Language)：DCL是数据库控制功能。是用来设置或更改数据库用户或角色权限的语句，包括（grant,deny,revoke等）语句。在默认状态下，只有sysadmin,dbcreator,db_owner或db_securityadmin等人员才有权力执行DCL</li></ul><h2><span id="1-innodb存储引擎">1. Innodb存储引擎</span></h2><h3><span id="11架构"><strong>1.1架构</strong></span></h3><p>MySQL5.5版本开始，默认使用InnoDB存储引擎，它擅长事务处理，具有崩溃恢复特性，在日常开发中使用广泛。下图是InnoDB架构图，左侧为内存结构，右侧为磁盘结构。</p><img src="/2023/07/28/MySQL/1.png" class width="1"><ul><li>内存结构</li></ul><p>​①Buffer pool：在执行增删改查操作时，先操作缓冲池中的数据，(缓冲池没有数据，再去磁盘加载并缓存在缓冲池中)，然后再以一定</p><p>​的频率刷新到磁盘中，减少磁盘IO，加快处理速度。</p><p>​缓冲池以page为单位，底层采用链表数据结构管理page。</p><p>​②change buffer：更改缓冲区（针对非唯一的二级索引页）。在执行DML语句时，如果数据不存在于Buffer pool，就把数据从磁盘加载</p><p>​到更改缓冲区，在更改缓冲区完成操作后，以一定的频率刷新到Buffer pool，再由Buffer pool刷新到磁盘。二级索引的DML操作是主键</p><p>​乱序插入的，频繁乱序的磁盘IO会大大减低处理速度，这就是change buffer存在的意义。</p><p>​③Adaptive Hash Index：自适应hash索引，用于优化buffer pool数据的查询。</p><p>​④log buffer：日志缓冲区。用来保存要写入磁盘的log日志（redo log、undo log），默认为16M，日志缓冲区的日志会定期刷新到磁</p><p>​盘。可以通过增加日志缓冲区的大小来减少磁盘IO。</p><p>​<strong>参数：</strong></p><p>​<code>innodb_log_buffer_size</code>：缓冲区大小 </p><p>​<code>innodb_flush_log_at_trx_commit</code>：刷新日志时机（0：每次事务提交时刷新到磁盘；1：每秒刷新到磁盘；2：日志在每次事务提交后写入，并每秒刷新到磁盘）。</p><ul><li>磁盘结构</li></ul><p>​①system tablespace：系统表空间是更改缓冲区的存储区域。</p><p>​②file-per-table tablespace：每个表的文件表空间。每一张表都会生成一个独立的表空间文件。</p><p>​③general tablespaces：通用表空间，默认不存在，但可以手动创建，手动指定关联。</p><p>​④doublewrite buffer files:双写缓冲区。InnoDB引擎将数据页从buffer pool刷新到磁盘前，先将数据页写入双写缓冲区文件中，便于系</p><p>​统异常时恢复数据。</p><p>​⑤undo tablespace：撤销表空间，MySQL实例在初始化时会自动创建两个默认的undo表空间（大小默认16M），用于存储undo log。</p><p>​⑥temporary tablespaces：临时表空间，用于存放临时表等数据。</p><p>​⑦redo log：重做日志，用来实现事务的持久性。当事务提交之后，会把所有修改信息都存到该日志中，用于在刷新脏页到磁盘发生错</p><p>​误时，进行数据恢复使用。</p><h3><span id="12-事务原理">1.2 事务原理</span></h3><ul><li><strong>redo log</strong></li></ul><p>​重做日志，记录的是事务提交时数据页的物理修改，是用来实现事务的持久性。</p><ul><li><strong>undo log</strong></li></ul><p>​回滚日志,用于记录数据被修改前的信息,作用包含两个:提供回滚和MVCC(多版本并发控制)</p><p>原子性：undo log</p><p>持久性：redo log</p><p>一致性：undo log +redo log</p><p>隔离性：锁+MVCC</p><h3><span id="13-mvcc">1.3 MVCC</span></h3><h2><span id="2b树">2.B+树</span></h2><p><strong>索引是一种数据结构，用于帮助我们在大量数据中快速定位到我们想要查找的数据。</strong> </p><p>索引在mysql数据库中分三类： </p><ul><li>B+树索引</li><li>Hash索引</li><li>全文索引</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/9b7dc733fa94a2f1db7956baf0b9ade7.png" alt="img"></p><p>根据上图我们来看下B+树和B树有什么不同。 </p><ol><li><p>B+树非叶子节点上是不存储数据的，仅存储键值，而B树节点中不仅存储键值，也会存储数据。之所以这么做是因为在数据库中页的大小是固定的，innodb中页的默认大小是16KB。如果不存储数据，那么就会存储更多的键值，相应的树的阶数（节点的子节点树）就会更大，树就会更矮更胖，如此一来我们查找数据进行磁盘的IO次数有会再次减少，数据查询的效率也会更快。另外，B+树的阶数是等于键值的数量的，如果我们的B+树一个节点可以存储1000个键值，那么3层B+树可以存储1000×1000×1000&#x3D;10亿个数据。一般根节点是常驻内存的，所以一般我们查找10亿数据，只需要2次磁盘IO。 </p></li><li><p>因为B+树索引的所有数据均存储在叶子节点，而且数据是按照顺序排列的。那么B+树使得范围查找，排序查找，分组查找以及去重查找变得异常简单。而B树因为数据分散在各个节点，要实现这一点是很不容易的。</p></li></ol><p>有心的读者可能还发现上图B+树中各个页之间是通过双向链表连接的，叶子节点中的数据是通过单向链表连接的。</p><p>其实上面的B树我们也可以对各个节点加上链表。其实这些不是它们之前的区别，是因为在mysql的innodb存储引擎中，索引就是这样存储的。也就是<strong>说上图中的B+树索引就是innodb中B+树索引真正的实现方式，准确的说应该是聚集索引（聚集索引和非聚集索引下面会讲到）。</strong></p><p>通过上图可以看到，在innodb中，我们通过数据页之间通过双向链表连接以及叶子节点中数据之间通过单向链表连接的方式可以找到表中所有的数据。</p><blockquote><p>MyISAM中的B+树索引实现与innodb中的略有不同。在MyISAM中，B+树索引的叶子节点并不存储数据，而是存储数据的文件地址。</p></blockquote><h2><span id="3优化案例">3.优化案例</span></h2><ol><li>mysql嵌套子查询效率确实比较低， 可以将其优化成连接查询</li><li>学会分析sql执行计划，mysql会对sql进行优化，所以分析执行计划很重要</li><li>内连接查询的时候，不管谁是左表右表，执行结果都一样。因为mysql会自动把小结果集的表选为驱动表（ 驱动表无论如何都会被全表扫描 ），大结果集的表选为被驱动表，被驱动表上的索引才生效。所以一般都是先执行where过滤，用到大表中的索引，然后再把小表和过滤后的大表关联到一起</li><li>简单来说就是小表驱动大表，大表索引过滤</li></ol><h2><span id="4乐观锁悲观锁">4.乐观锁悲观锁</span></h2><blockquote><p>**悲观锁：**又称排他锁，具有很强的排他性，在数据处理过程中会将数据出于锁定状态。</p><p>悲观锁的实现往往是依靠数据库提供的锁机制。</p><p>关系数据库锁机制有： 行级锁，标级锁，读锁，写锁，都是在操作之前先上锁。 悲观锁的隔离级别可以看做可重复读。</p></blockquote><blockquote><p><strong>乐观锁:</strong>相对悲观锁而言，乐观锁机制采取了更加宽松的加锁机制，大多是基于版本号（ Version ）记录机制实现，而不需要借助数据库的锁机制。<br>乐观锁的本质不是锁，其隔离级别可以看作为读未提交</p></blockquote><p><strong>悲观锁的优缺点：</strong></p><p>悲观锁的优点是能避免冲突的发生。</p><p>悲观锁的缺点是开销较大，而且加锁时间较长，对于并发的访问性支持不好。</p><p><strong>乐观锁的优缺点：</strong></p><p>乐观锁的优点是避免了长事务中的数据库加锁解锁开销，大大提升了大并发量下的系统整体性能表现。</p><p>乐观锁的缺点是只能在提交数据时才发现业务事务将要失败，如果系统的冲突非常的多，而且一旦冲突就要因为重新计算提交而造成较大的代价的话，乐观锁也会带来很大的问题。</p><p><strong>乐观锁与悲观锁的选择：</strong></p><p>乐观锁适用多读场景。</p><p>悲观锁适用于多写的场景，避免了产生冲突。</p><h2><span id="5日志">5.日志</span></h2><p>MySQL三大日志包括：undolog，redo log，binlog，它们分别有以下作用：</p><p>undolog：是<strong>Innodb存储引擎</strong>生成的日志。用于事务的<strong>回滚和MVCC</strong>，保证了事务的<strong>原子性</strong>。</p><p>redo log：是<strong>Innodb存储引擎</strong>生成的日志。用于<strong>崩溃后修复</strong>数据，保证了事务的<strong>持久性</strong>。</p><p>binlog：是<strong>Server层</strong>生成的日志。用于<strong>备份数据</strong>，<strong>集群</strong>等。</p><p><a href="https://blog.csdn.net/weixin_46345400/article/details/128732002">MySQL三大日志_#HashMap#的博客-CSDN博客</a></p><h2><span id="6主从同步">6.主从同步</span></h2><h2><span id="7集群">7.集群</span></h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2023/07/27/Redis/"/>
      <url>/2023/07/27/Redis/</url>
      
        <content type="html"><![CDATA[<h2><span id="1使用案例">1.使用案例</span></h2><ul><li>计数器</li><li>限速器</li><li>使用 bitmap 实现用户上线次数统计</li><li>String类型的使用场景<ul><li>计数器</li><li>统计多单位的数量:uuid:123444:follow 0</li><li>粉丝数</li><li>对象存储缓存</li></ul></li><li>List类型的使用场景<ul><li>消息排队</li><li>消息队列</li><li>栈</li></ul></li><li>Hash类型的使用场景<ul><li>Hash变更的数据 user name age,尤其是用户信息之类的,经常变动的信息!</li><li>Hash更适合对象的存储,String更适合字符串存储!</li></ul></li><li>Set类型的使用场景<ul><li>交集、并集、差集等场景的使用</li></ul></li><li>ZSet类型的使用场景<ul><li>set排序,存储班级成绩表 工资表排序</li><li>普通消息,1.重要消息 2.带权重进行判断</li><li>排行榜应用实现,取Top N测试</li></ul></li><li>Geospatial(地理位置)<ul><li>通过georadius就可以完成附近的人功能</li><li>withcoord:带上坐标</li><li>withdist:带上距离,单位与半径单位相同</li><li>COUNT n:只显示前n个(按距离递增排序)</li></ul></li><li>Hyperloglog(基数统计)<ul><li>网页的访问量</li></ul></li></ul><h2><span id="2线程模型">2.线程模型</span></h2><p><a href="https://blog.csdn.net/weixin_44479862/article/details/126512100">(132条消息) Redis源码剖析——线程模型_redis线程模型_oywLearning的博客-CSDN博客</a></p><h2><span id="3哨兵模式">3.哨兵模式</span></h2><p>在 Redis 主从复制模式中，因为系统不具备自动恢复的功能，所以当主服务器（master）宕机后，需要手动把一台从服务器（slave）切换为主服务器。在这个过程中，不仅需要人为干预，而且还会造成一段时间内服务器处于不可用状态，同时数据安全性也得不到保障，因此主从模式的可用性较低，不适用于线上生产环境。</p><p>Redis 官方推荐一种高可用方案，也就是 Redis Sentinel 哨兵模式，它弥补了主从模式的不足。Sentinel 通过监控的方式获取主机的工作状态是否正常，当主机发生故障时， Sentinel 会自动进行 Failover（即故障转移），并将其监控的从机提升主服务器（master），从而保证了系统的高可用性。</p><p><a href="http://c.biancheng.net/redis/sentinel-model.html">Redis集群：Sentinel哨兵模式（详细图解） (biancheng.net)</a></p><h2><span id="4集群">4.集群</span></h2><p><a href="https://blog.csdn.net/qq_46370017/article/details/126347976">(132条消息) Redis集群（Cluster）_Hpuers的博客-CSDN博客</a></p><h2><span id="5缓存击穿缓存穿透缓存雪崩解决方案">5.缓存击穿\缓存穿透\缓存雪崩解决方案</span></h2><p>[(132条消息) <a href="https://blog.csdn.net/m0_51963973/article/details/131362602">Redis]缓存穿透、缓存击穿、缓存雪崩问题及解决方法_Bruce1801的博客-CSDN博客</a></p><h2><span id="6jedis">6.Jedis</span></h2><p>Jedis就是集成了redis的一些命令操作，封装了redis的java客户端。并且提供了连接池管理。</p><p><a href="https://blog.csdn.net/qq_43654581/article/details/121770415">(132条消息) Redis之jedis_redis jedis_yzm4399的博客-CSDN博客</a></p><h2><span id="7redission">7.Redission</span></h2><p><a href="https://blog.csdn.net/ohwang/article/details/125038268">(132条消息) 专题四 Redis分布式锁中——Redission_v_BinWei_v的博客-CSDN博客</a></p><h2><span id="8mongodb使用案例">8.MongoDB使用案例</span></h2><p><strong>MongoDB的适用场景</strong></p><ul><li>网站数据：MongoDB非常适合实时插入，更新与查询，并具备网站实时数据存储所需的复制及高度伸缩性。</li><li>缓存：由于性能很高，Mongo也适合作为信息存储的缓存层。在系统重启之后，由Mongo搭建的持久化缓存层可以避免下层数据资源过载。</li><li>大尺寸、低价值的数据：使用传统的关系型数据库存储一些大尺寸低价值数据时比较浪费资源，在此之前，很多程序员往往选择使用传统文件存储的方式。</li><li>高伸缩性的场景：Mongo非常适合由数十台或数百台服务器组成的数据库，Mongo的线路图中已经包含对MapReduce引擎的内置支持以及集群高可用的解决方案。</li><li>用于对象及JSON数据的存储：Mongo的BSON数据格式非常适合文档化的存储及查询。<br><strong>MongoDB的行业应用场景</strong></li><li>游戏场景：使用MongoDB存储游戏用户信息，用户的装备、积分等直接以内嵌文档的形式存储，方便直接查询、更新。</li><li>物流场景：使用MongoDB存储订单信息，订单状态在运行过程中会不断更新，以MongoDB内嵌数据的形式来存储，一次查询就能将订单所有的变更信息读出来。</li><li></li><li>社交场景：使用MongoDB存储用户信息，以及用户发布的朋友圈信息，通过地理位置索引实现附近的人、地点等功能。<br>物联网场景：使用MongoDB存储所有接入的智能设备，以及设备汇报的日志信息，并对这些信息进行多维度的分析。</li><li>直播：使用MongoDB存储用户信息、礼物信息等。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批量插入10万+条数据优化过程</title>
      <link href="/2023/06/14/%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A510%E4%B8%87-%E6%9D%A1%E6%95%B0%E6%8D%AE%E4%BC%98%E5%8C%96%E8%BF%87%E7%A8%8B/"/>
      <url>/2023/06/14/%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A510%E4%B8%87-%E6%9D%A1%E6%95%B0%E6%8D%AE%E4%BC%98%E5%8C%96%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<img src="https://plus.unsplash.com/premium_photo-1684164601714-177fbc9b5184?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwzMXx8fGVufDB8fHx8fA%3D%3D&w=1000&q=80" alt="a child's bedroom with a stuffed animal on the floor" style="zoom:50%;"><p>在使用mybatis插入大量数据的时候,为了提高效率,放弃循环插入,改为批量插入,mapper如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestMapper</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Insert(&quot;&lt;script&gt;&quot; +</span></span><br><span class="line"><span class="meta">            &quot;insert into test (t1,t2,t3,t4,t5) values &quot; +</span></span><br><span class="line"><span class="meta">            &quot;&lt;foreach collection=&#x27;list&#x27; item=&#x27;obj&#x27; separator=&#x27;,&#x27;&gt;&quot; +</span></span><br><span class="line"><span class="meta">            &quot;(#&#123;obj.t1&#125;,#&#123;obj.t2&#125;,#&#123;obj.t3&#125;,#&#123;obj.t4&#125;,#&#123;obj.t5&#125;)&quot; +</span></span><br><span class="line"><span class="meta">            &quot;&lt;/foreach&gt;&quot; +</span></span><br><span class="line"><span class="meta">            &quot;&lt;/script&gt;&quot;)</span></span><br><span class="line">    Integer <span class="title function_">testBatchInsert</span><span class="params">(List&lt;TestVO&gt; list)</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestVO</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String t1;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String t2;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String t3;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String t4;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String t5; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = TestApplication.class)</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestMapper testMapper;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;TestVO&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">200000</span>; i++) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">TestVO</span>(i + <span class="string">&quot;,&quot;</span> + i, i + <span class="string">&quot;,&quot;</span> + i, i + <span class="string">&quot;,&quot;</span> + i, i + <span class="string">&quot;,&quot;</span> + i, i + <span class="string">&quot;,&quot;</span> + i));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(testMapper.testBatchInsert(list));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了复现bug,我限制了JVM内存:</p><img src="/2023/06/14/%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A510%E4%B8%87-%E6%9D%A1%E6%95%B0%E6%8D%AE%E4%BC%98%E5%8C%96%E8%BF%87%E7%A8%8B/format,webp.webp" class title="mybatis批量插入10万条数据的优化过程_java"><p>执行测试类报错如下:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java<span class="selector-class">.lang</span><span class="selector-class">.OutOfMemoryError</span>: Java heap space</span><br><span class="line"> </span><br><span class="line">  at java.base/java<span class="selector-class">.util</span><span class="selector-class">.Arrays</span><span class="selector-class">.copyOf</span>(Arrays<span class="selector-class">.java</span>:<span class="number">3746</span>)</span><br></pre></td></tr></table></figure><p>可以看到,Arrays在申请内存的时候,导致栈内存溢出</p><p>改进方法,分批新增:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = TestApplication.class)</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestMapper testMapper;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;TestVO&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">200000</span>; i++) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">TestVO</span>(i + <span class="string">&quot;,&quot;</span> + i, i + <span class="string">&quot;,&quot;</span> + i, i + <span class="string">&quot;,&quot;</span> + i, i + <span class="string">&quot;,&quot;</span> + i, i + <span class="string">&quot;,&quot;</span> + i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> list.size() / <span class="number">10000</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt; index;i++)&#123;</span><br><span class="line">            <span class="comment">//stream流表达式，skip表示跳过前i*10000条记录，limit表示读取当前流的前10000条记录</span></span><br><span class="line">            testMapper.testBatchInsert(list.stream().skip(i*<span class="number">10000</span>).limit(<span class="number">10000</span>).collect(Collectors.toList()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一种方法是调高JVM内存,不过不建议使用,不仅吃内存,而且数据量过大会导致sql过长报错.</p><p>另附存储过程循环插入:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> IF <span class="keyword">EXISTS</span> pdu_loop;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pdu_loop(a <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"> <span class="keyword">declare</span> i <span class="type">int</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line"> <span class="comment">-- 循环开始</span></span><br><span class="line"> loop_name:loop               </span><br><span class="line">  if i<span class="operator">&gt;</span>a <span class="keyword">then</span> </span><br><span class="line"><span class="comment">-- 判断条件成立则结束循环</span></span><br><span class="line">    leave loop_name;          </span><br><span class="line">  <span class="keyword">end</span> if;</span><br><span class="line">  <span class="comment">-- start 往表添加数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> `scs_test2`.`scs_exrate_system_d`(`tenantsid`, `exrate_system_no`, `effective_date`, `source_currency`, `target_currency`, `exrate_decimal_place`, `direct_quotation_exrate`, `indirect_quotation_exrate`, `average_exrate`, `manage_status`, `create_date`, `create_by`, `modified_date`, `modified_by`) <span class="keyword">VALUES</span> (<span class="number">485743257928256</span>, i, <span class="string">&#x27;2022-12-12 12:12:12&#x27;</span>, <span class="string">&#x27;jsj&#x27;</span>, <span class="string">&#x27;003&#x27;</span>, <span class="number">2</span>, <span class="number">6.9900000000</span>, <span class="number">7.9900000000</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;2023-06-12 01:03:45&#x27;</span>, <span class="string">&#x27;ScsQCTest001&#x27;</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- end</span></span><br><span class="line">  <span class="keyword">set</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 循环结束</span></span><br><span class="line">  <span class="keyword">end</span> loop;                  </span><br><span class="line"><span class="comment">-- start输出结果</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> scs_exrate_system_d <span class="keyword">where</span> source_currency<span class="operator">=</span><span class="string">&#x27;jsj&#x27;</span>;</span><br><span class="line"><span class="comment">-- end   </span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> <span class="comment">-- 执行存储过程</span></span><br><span class="line"><span class="keyword">call</span> pdu_loop(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE3实现组件刷新</title>
      <link href="/2023/05/31/VUE3%E5%AE%9E%E7%8E%B0%E7%BB%84%E4%BB%B6%E5%88%B7%E6%96%B0/"/>
      <url>/2023/05/31/VUE3%E5%AE%9E%E7%8E%B0%E7%BB%84%E4%BB%B6%E5%88%B7%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>VUE3中实现组件刷新</p><img src="https://img2.baidu.com/it/u=4154503761,1097204876&fm=253&fmt=auto&app=138&f=JPEG?w=888&h=500" style="zoom:50%;"><p>provide ： 向子组件以及子孙组件传递数据。接收两个参数，第一个参数是 key，即数据的名称；第二个参数为 value，即数据的值<br>inject ： 接收父组件或祖先组件传递过来的数据。接收一个参数 key，即父组件或祖先组件传递的数据名称</p><p>通过依赖注入（provide和inject）实现自定义页面刷新事件</p><p>原理： 给app.vue中router-view绑定v-if事件，在函数中控制v-if的值在短时间内由true到false再到true,从而使页面达到刷新效果</p><p><strong>刷新实现</strong></p><p>APP.VUE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; RouterView &#125; from &#x27;vue-router&#x27;</span><br><span class="line">import &#123; ref, provide, nextTick &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const isRouterActive = ref(true)</span><br><span class="line">provide(&#x27;reload&#x27;, () =&gt; &#123;</span><br><span class="line">  isRouterActive.value = false</span><br><span class="line">  nextTick(() =&gt; &#123;</span><br><span class="line">    isRouterActive.value = true</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;router-view v-if=&quot;isRouterActive&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/emplate&gt;</span><br></pre></td></tr></table></figure><p><strong>刷新页面</strong><br>需要用到刷新事件的子组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; reactive, inject  &#125; from &#x27;vue&#x27;</span><br><span class="line">//刷新页面</span><br><span class="line">//注入刷新事件,这里括号中的参数要对应上前面provide中的第一个参数 </span><br><span class="line">const reload: any = inject(&#x27;reload&#x27;)</span><br><span class="line">const jump = (item: any) =&gt; &#123;</span><br><span class="line">....</span><br><span class="line">  ....</span><br><span class="line">  reload();</span><br><span class="line">    ....</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3复制功能实现（vue-clipboard3）</title>
      <link href="/2023/05/26/vue3%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0%EF%BC%88vue-clipboard3%EF%BC%89/"/>
      <url>/2023/05/26/vue3%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0%EF%BC%88vue-clipboard3%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><img src="https://w.wallhaven.cc/full/m3/wallhaven-m3zjx1.jpg"></p><ul><li>安装 <code>vue-clipboard3</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save vue-clipboard3</span><br></pre></td></tr></table></figure><ul><li>在 <code>setup () &#123;&#125;</code> 中使用：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;touchCopy&quot;&gt;复制链接&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; defineComponent &#125; from &#x27;vue&#x27;</span><br><span class="line">// 导入插件</span><br><span class="line">import useClipboard from &#x27;vue-clipboard3&#x27;</span><br><span class="line"></span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  setup () &#123;</span><br><span class="line">    // 点击复制</span><br><span class="line">    function touchCopy () &#123;</span><br><span class="line">      // 调用</span><br><span class="line">      copy(&#x27;拷贝内容&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    // 使用插件</span><br><span class="line">    const &#123; toClipboard &#125; = useClipboard()</span><br><span class="line">    const copy = async (msg) =&gt; &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        // 复制</span><br><span class="line">        await toClipboard(msg)</span><br><span class="line">        // 复制成功</span><br><span class="line">      &#125; catch (e) &#123;</span><br><span class="line">        // 复制失败</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 导出</span><br><span class="line">    return &#123;</span><br><span class="line">      // 点击复制</span><br><span class="line">      touchCopy</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>在 <code>&lt;script setup&gt;</code> 中使用：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;touchCopy&quot;&gt;复制链接&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">// 导入插件</span><br><span class="line">import useClipboard from &#x27;vue-clipboard3&#x27;</span><br><span class="line"></span><br><span class="line">// 点击复制</span><br><span class="line">function touchCopy () &#123;</span><br><span class="line">  // 调用</span><br><span class="line">  copy(&#x27;拷贝内容&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">// 使用插件</span><br><span class="line">const &#123; toClipboard &#125; = useClipboard()</span><br><span class="line">const copy = async (msg) =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    // 复制</span><br><span class="line">    await toClipboard(msg)</span><br><span class="line">    // 复制成功</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    // 复制失败</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo部署步骤</title>
      <link href="/2023/05/26/Hexo%E9%83%A8%E7%BD%B2%E6%AD%A5%E9%AA%A4/"/>
      <url>/2023/05/26/Hexo%E9%83%A8%E7%BD%B2%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>每次部署的步骤，可按以下三步来进行</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx hexo clean</span><br><span class="line">npx hexo generate</span><br><span class="line">npx hexo deploy</span><br></pre></td></tr></table></figure><blockquote><p>一些常用命令：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npx hexo new <span class="string">&quot;postName&quot;</span> <span class="comment">#新建文章</span></span><br><span class="line">npx hexo new page <span class="string">&quot;pageName&quot;</span> <span class="comment">#新建页面</span></span><br><span class="line">npx hexo generate <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">npx hexo server <span class="comment">#开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span></span><br><span class="line">npx hexo deploy <span class="comment">#将.deploy目录部署到GitHub</span></span><br><span class="line">npx hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></span><br><span class="line">npx hexo version  <span class="comment">#查看Hexo的版本</span></span><br></pre></td></tr></table></figure><blockquote><p>网络图片不显示在标题下面添加以下内容</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;referrer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-referrer&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><img src="/2023/05/26/Hexo%E9%83%A8%E7%BD%B2%E6%AD%A5%E9%AA%A4/image-20250321103102148.png" class title="image-20250321103102148">]]></content>
      
      
      <categories>
          
          <category> 趣味 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML文件或者字符串转Bean对象</title>
      <link href="/2023/03/20/XML%E6%96%87%E4%BB%B6%E6%88%96%E8%80%85%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%ACBean%E5%AF%B9%E8%B1%A1/"/>
      <url>/2023/03/20/XML%E6%96%87%E4%BB%B6%E6%88%96%E8%80%85%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%ACBean%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>需要的xml文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">myDocument</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">desc</span>&gt;</span>sky<span class="tag">&lt;/<span class="name">desc</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">myPerson</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">person</span> <span class="attr">name</span>=<span class="string">&quot;sky1&quot;</span> <span class="attr">age</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">person</span> <span class="attr">name</span>=<span class="string">&quot;sky2&quot;</span> <span class="attr">age</span>=<span class="string">&quot;19&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">myPerson</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">myDocument</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>基本步骤</p></blockquote><ol><li>定义好各个xml元素对应的javabean，在类上加注解@XmlRootElement(name &#x3D; “xxx”)</li><li>在各个子元素对应的java字段上（如desc、myPerson）加注解 @XmlElement(name &#x3D; “xxx”)</li><li>其中person的xml标签比较特殊，具有name和age这2个属性，需要做特殊处理：不能直接在name字段上加注解，而是需要先建立set或者get方法，在方法上加注解@XmlAttribute(name &#x3D; “xxx”)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@XmlRootElement(name = &quot;myDocument&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDocument</span>&#123;</span><br><span class="line">    <span class="meta">@XmlElement(name = &quot;desc&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">    <span class="meta">@XmlElement(name = &quot;myPerson&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> MyPerson myPerson;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@XmlRootElement(name = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="meta">@XmlAttribute(name = &quot;name&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@XmlAttribute(name = &quot;age&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@XmlRootElement(name = &quot;myPerson&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPerson</span>&#123;</span><br><span class="line">    <span class="meta">@XmlElement(name = &quot;person&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Person&gt; person;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestXml</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">xml</span> <span class="operator">=</span> <span class="string">&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;utf-8\&quot;?&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;myDocument&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;desc&gt;sky&lt;/desc&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;myPerson&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;person name=\&quot;sky1\&quot; age=\&quot;18\&quot;/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;person name=\&quot;sky2\&quot; age=\&quot;19\&quot;/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;/myPerson&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/myDocument&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">JAXBContext</span> <span class="variable">context</span> <span class="operator">=</span> JAXBContext.newInstance(MyDocument.class);</span><br><span class="line">        <span class="type">Unmarshaller</span> <span class="variable">unmarshaller</span> <span class="operator">=</span> context.createUnmarshaller();</span><br><span class="line">        <span class="type">StringReader</span> <span class="variable">sr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringReader</span>(xml);</span><br><span class="line">        <span class="type">MyDocument</span> <span class="variable">myDocument</span> <span class="operator">=</span> (MyDocument) unmarshaller.unmarshal(sr);</span><br><span class="line">        System.out.println(myDocument);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2023/03/20/XML%E6%96%87%E4%BB%B6%E6%88%96%E8%80%85%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%ACBean%E5%AF%B9%E8%B1%A1/image-20230320113703469.png" class title="image-20230320113703469"><p>图解：</p><img src="/2023/03/20/XML%E6%96%87%E4%BB%B6%E6%88%96%E8%80%85%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%ACBean%E5%AF%B9%E8%B1%A1/image-20230320113646010.png" class title="image-20230320113646010">]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有趣的排序算法</title>
      <link href="/2023/03/16/%E6%9C%89%E8%B6%A3%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2023/03/16/%E6%9C%89%E8%B6%A3%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 二分查找法</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> nums 查找的数组</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> target 目标值</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 返回数组下标</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 冒泡排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums 需要排序的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; size - <span class="number">1</span> - i; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] &gt; nums[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[j];</span><br><span class="line">                nums[j] = nums[j + <span class="number">1</span>];</span><br><span class="line">                nums[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 选择排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums 需要排序的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectionSort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; nums.length; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] &lt; nums[i]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">                nums[i] = nums[j];</span><br><span class="line">                nums[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 需要排序的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快速排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums 需要排序的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 序列最左边</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end 序列最右边</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> i, j, base;</span><br><span class="line">    i = start;</span><br><span class="line">    j = end;</span><br><span class="line">    base = nums[start];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; nums[j] &gt;= base) &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; nums[i] &lt;= base) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( i &lt; j) &#123;</span><br><span class="line">            swap(nums, i, j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(nums, start, i);</span><br><span class="line">    quickSort(nums, start, j-<span class="number">1</span>);</span><br><span class="line">    quickSort(nums, j+<span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换左右数值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums 数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left 左边的索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 右边的索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[left];</span><br><span class="line">    nums[left] = nums[right];</span><br><span class="line">    nums[right] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有趣的博客之旅!</title>
      <link href="/2023/03/03/%E6%9C%89%E8%B6%A3%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B9%8B%E6%97%85/"/>
      <url>/2023/03/03/%E6%9C%89%E8%B6%A3%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<p><strong>Today you do things others don’t do. Tomorrow you do things others can’t do.</strong></p><p>– 今天你做别人不做的事，明天你做别人做不到的事。</p><p>“人们总是容易高估一天的影响，而低估长期的影响”。比如学英语、写作，可能努力了一个月都没有效果，很多人就开始放弃了，转而去寻找其他的方法。但有些人坚持了下来，于是这些人坚持了一年、两年甚至几年之后，最后到达了很高的高度，才发现原来每一天的坚持都没有浪费，最后都是有效果的。</p><p><img src="https://pic3.zhimg.com/v2-7d7797fce1c20e4dce47ecc3454b0de4_r.jpg?source=1940ef5c" alt="img"></p><p><strong>1. 减少任务切换，提高做事情的效率</strong></p><p>提高做事情的效率，最好的办法就是进入“心流”的状态。不管是写代码、写文字还是看书学习，在“心流”的状态下，效率比平时要提高好几倍。</p><p>“心流”的状态，就是一种忘我的境界，忘记了时间、忘记了周围所处的环境，甚至忘记了身体上的痛苦，专心沉浸在当下所做的事情上。我相信这种状态，大家多多少少都有体会，比如在废寝忘食打游戏的时候。这种状态下，人所爆发出来的潜能是巨大的。</p><p>要达到“心流”的状态，最简单易行的方法，就是减少任务的切换。就像CPU线程切换，需要缓存上一个任务的执行状态，加载下一个任务的运行环境，效率很低。人脑也是，在上下文切换的时候，需要耗费很多的时间和精力。</p><p>而工作中，经常会被工作软件的消息提醒所打断，很难进入”心流“状态。比如，正在尝试解决一个疑难的问题，但是突然来了一条工作上的消息，于是不得不中断当前的工作，去看这个消息。等处理完消息后，在回到工作，可能已经忘记之前做到哪里了，又需要花时间才能重新进入状态。</p><p>可以尝试”番茄钟”的方法。在每个番茄钟开始的时候，屏蔽消息，集中精神工作25分钟，然后再花5分钟处理这25分钟到达的消息。处理完后，进入下一个番茄钟。</p><p><strong>2. 不要给自己定太高的目标</strong></p><p><strong>3. 先写起来，自然而然就会有进步</strong></p><p>第一个就是不管怎么样，不管写得有多烂，先写起来，以量变来引起质变。我现在的写作量，可能连那些大V一个月的量都不到，凭什么觉得自己的水平就能和人家一样。如果每天输出500字，一年就是18.25万字。坚持写，我相信写一年之后，水平肯定会有进步。</p><p>没有什么是刻意练习不能达成的，如果有，那肯定是练习不够多。</p><p><strong>4. 多看多模仿</strong></p><p>写文章也是有方法可以借鉴的。去看好的文章是什么样的，向优秀的文章和作者学习。</p><p>比如，我之前看一个技术博主，会在每篇文章的开头放一个脑图，描述整片文章的整体架构，我觉得这个方法就很好。首先自己可以根据这篇脑图往里填充资料，速度更快也更清晰，同时，读者也可以在看文章之前对文章的内容有一个整体的感知，很快就能定位到自己需要的内容上。之后我的文章也可以借鉴这个方法。</p><hr><p>可以从以下几个方面去尝试：</p><p><strong>1. 提前想一些topic，主动积累</strong></p><p>在开始写博客之前，提前收集一些topic。我现在就有一个文档，专门用来放我想写的文章topic，现在这个文档里面已经有几十个可以写的topic了。</p><p>提前脑暴一些topic，或者列一个知识图谱，到时候如果发现没什么内容可写，直接去list里面找一个topic就好了。</p><p><strong>2. 主动去学习一些新的东西</strong></p><p>对于一些业务开发的同学，可以在开发之余，主动push自己去学一些新的技术。比如看一些技术书籍和博客。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目经历需要注意的地方</title>
      <link href="/2023/03/03/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/"/>
      <url>/2023/03/03/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E5%8E%86%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img0.baidu.com/it/u=2174305505,1421485888&fm=253&fmt=auto&app=138&f=PNG?w=500&h=500" alt="img"></p><p>项目经历是介绍你实战经历的地方，同时也能反映你对已掌握的技能的使用情况。对于应聘偏技术类的岗位来说，这块非常的重要。</p><p>下面会以支付中心作为例子进行阐述。</p><ul><li>项目背景，也即是你一定要非常清楚启动这个项目的缘由是啥。如果这个都说不清楚的话，那说明，你真的就是埋头干活，偏执行的角色。对项目并没有一个整体的认识。就算你只是这个项目的普通参与者，也需要主动的去了解和理解该项目立项的原因。有个注意的地方是，项目背景的文字描述不要太长，一两句就可以了。比如说：当前支付中心耦合在订单系统中，为了提升支付模块的稳定性、维护性、性能和扩展性，需要将支付模块独立出来，统一为其他内部系统提供支付能力;</li><li>项目功能介绍，介绍一下这个项目能做什么，有什么核心模块，需要应付什么量级的流量。以支付中心为例子：为内部的订单系统提供支付能力，对内提供了微信、支付宝、抖音、海外、信用卡、钱包、礼品卡以及组合支付的支付、回调、退款、查询、业务对账等能力。平时需要应付每秒1万的支付请求。</li><li>技术架构设计，这里考察的是技术选型的严谨性和模块设计的合理性。如果项目用到了RabbitMQ、Redis、Kafka等一些技术，你自己心里一定有个底，就是当时为什么选用这些技术，是经过深思熟虑的吗？是经过了很多轮的技术栈对比后决定使用的吗。也即是技术选型是一个严谨的论证的一个过程。而设计这块，则要说清楚模块划分的缘由以及解决方案。还是以支付中心为例子：通过支付网关，对外提供统一的接口，而内部则通过支付路由模块，进行具体的支付方式路由，并把单独的支付方式，以物理单元进行隔离，避免各种支付方式在出故障时，相互影响。为了应付高频的支付动作，采用数据库分库的方式缓解写的压力。</li><li>我负责的模块，如果你参与的项目是部门核心项目，但是自己参与的模块确是边缘模块或者只是参与了很小的一部分，虽然你也能在这个项目里，得到成长。但是那是称不上个人亮点的。因为面试官会更倾向于：你为这个项目做了什么贡献，因为你，项目有了什么好的改变和突破性进展。因此，做项目的时候，不妨跟自己的领导多反馈一下，希望能独立主导一些重要的模块。如果领导觉得当前的你还无法独立hold住重要的模块，你也不要气馁，平时多多提升自己，争取后续能主导一些重要模块。这个真的很重要，为了将来的自己，你必须得这么做。在做项目的时候，如果你长期一直起着螺丝钉的作用的话，对你极其不利，甚至可以说，你是在浪费时间。</li><li>难点和踩过的坑，难点也即是亮点。在你负责的模块里，具体的难点是什么，你是通过什么方案解决的。而解决的过程中，又遇到什么大坑？怎么优化的。这个其实是一种引导，把面试官引入到你自己比较熟悉又印象深刻的领域，如果你准备充分的话，是能给面试官一个好的印象的，是能加分的。同时能解决掉难点，对自身成长也是有利的，且还能说明的你韧性不错，有追求。</li><li>取得的成效，不能只是重视过程，而不重视结果，这是不可取的。你需要用结果和数据体现你的价值。比如说，支付中心上线后，你负责的业务模块，慢调用和慢SQL消失了，接口响应速度提升了10倍，上线半年，无任何大故障。等等。</li></ul><h2><span id="项目经历写几个合适">项目经历写几个合适？</span></h2><p>如果按照上面的的方式来书写项目的话，那每个项目的文字描述是不短的，一个项目的描述就大概要占用半页了。因此，简历里的项目不能太多，2到3个就可以了。项目主要在精不在多，把自己负责比较多的且能作为自己的一个亮点的核心项目，说清楚道明白，更为重要。</p>]]></content>
      
      
      <categories>
          
          <category> 简历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看SQL执行计划(explain)</title>
      <link href="/2023/03/03/%E6%9F%A5%E7%9C%8BSQL%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92-explain/"/>
      <url>/2023/03/03/%E6%9F%A5%E7%9C%8BSQL%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92-explain/</url>
      
        <content type="html"><![CDATA[<h2><span id="查看sql执行计划">查看SQL执行计划</span></h2><p>**explain：**explain select * from xxx</p><p>当使用<code>explain sql</code>后会看到执行计划</p><p><img src="F:\GitDown\hexo\source_posts\查看SQL执行计划-explain.assets\image-20230303142552512.png" alt="image-20230303142552512"></p><table><thead><tr><th>字段</th><th>解释</th></tr></thead><tbody><tr><td>id</td><td>每个被独立执行的操作标识，标识对象被操作的顺序，id值越大，先被执行，如果相同，执行顺序从上到下</td></tr><tr><td>select_type</td><td>查询中每个select 字句的类型</td></tr><tr><td>table</td><td>被操作的对象名称，通常是表名，但有其他格式</td></tr><tr><td>partitions</td><td>匹配的分区信息(对于非分区表值为NULL)</td></tr><tr><td>type</td><td>连接操作的类型</td></tr><tr><td>possible_keys</td><td>可能用到的索引</td></tr><tr><td>key</td><td>优化器实际使用的索引(<strong>最重要的列</strong>) 从最好到最差的连接类型为<code>const</code>、<code>eq_reg</code>、<code>ref</code>、<code>range</code>、<code>index</code>和<code>ALL</code>。当出现<code>ALL</code>时表示当前SQL出现了“坏味道”</td></tr><tr><td>key_len</td><td>被优化器选定的索引键长度，单位是字节</td></tr><tr><td>ref</td><td>表示本行被操作对象的参照对象，无参照对象为NULL</td></tr><tr><td>rows</td><td>查询执行所扫描的元组个数（对于innodb，此值为估计值）</td></tr><tr><td>filtered</td><td>条件表上数据被过滤的元组个数百分比</td></tr><tr><td>extra</td><td>执行计划的重要补充信息，当此列出现<code>Using filesort</code> , <code>Using temporary</code> 字样时就要小心了，很可能SQL语句需要优化</td></tr></tbody></table><h3><span id="sql优化小结">SQL优化小结</span></h3><p>这里给大家总结一下优化SQL的套路</p><ol><li>查看执行计划 explain</li><li>如果有告警信息，查看告警信息 show warnings;</li><li>查看SQL涉及的表结构和索引信息</li><li>根据执行计划，思考可能的优化点</li><li>按照可能的优化点执行表结构变更、增加索引、SQL改写等操作</li><li>查看优化后的执行时间和执行计划</li><li>如果优化效果不明显，重复第四步操作</li></ol>]]></content>
      
      
      <categories>
          
          <category> SQL优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库中DML、DDL、DCL的含义及区别</title>
      <link href="/2023/03/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%ADDML%E3%80%81DDL%E3%80%81DCL%E7%9A%84%E5%90%AB%E4%B9%89%E5%8F%8A%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/03/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%ADDML%E3%80%81DDL%E3%80%81DCL%E7%9A%84%E5%90%AB%E4%B9%89%E5%8F%8A%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img1.baidu.com/it/u=3490013694,190534170&fm=253&fmt=auto&app=138&f=JPEG?w=600&h=356" alt="img"></p><p>数据库管理系统软件是一种操纵和管理数据库的大型软件。</p><p>其功能包括数据库定义、数据操纵、数据库的运行管理、数据库建立和维护等。 </p><p> 数据库应用程序是指以数据库为基础，用VB或其他开发工具开发的、实现某种具体功能的程序。</p><p>一、DML与DDL的含义：</p><p>1、DML（Data Manipulation Language）数据操作语言-数据库的基本操作，SQL中处理数据等操作统称为数据操纵语言,简而言之就是实现了基本的“增删改查”操作。包括的关键字有：select、update、delete、insert、merge</p><p>2、DDL（Data Definition Language）数据定义语言-用于定义和管理 SQL 数据库中的所有对象的语言，对数据库中的某些对象(例如，database,table)进行管理。包括的关键字有：</p><p>create、alter、drop、truncate、comment、grant、revoke</p><p>二、DML与DDL的区别：</p><p>1.DML操作是可以手动控制事务的开启、提交和回滚的。</p><p>2.DDL操作是隐性提交的，不能rollback！</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>趣味赛跑</title>
      <link href="/2023/03/02/%E8%B6%A3%E5%91%B3%E8%B5%9B%E8%B7%91/"/>
      <url>/2023/03/02/%E8%B6%A3%E5%91%B3%E8%B5%9B%E8%B7%91/</url>
      
        <content type="html"><![CDATA[<p>我：为什么你的键盘这么响？</p><p>开发者：我是一名C++开发人员。</p><p>我：那又怎样！我是一名python开发人员。</p><p>开发者：你太懒了！你不知道C++是强类型（strongly typed）的吗？</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 趣味 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
